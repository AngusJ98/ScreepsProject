{"code":"import { config } from \"config\";\r\nexport class Manager {\r\n    constructor(initialiser, name, priority) {\r\n        //info from initialiser\r\n        this.name = name;\r\n        this.room = initialiser.room;\r\n        this.capital = initialiser.capital;\r\n        this.priority = priority;\r\n        this.pos = initialiser.pos;\r\n        //Get list of my creeps from capital and group them by role\r\n        this.creeps = this.capital.creepsByManager[this.name] || [];\r\n        this.creepsByRole = _.groupBy(this.creeps, r => r.memory.role);\r\n        this.capital.managers.push(this);\r\n    }\r\n    //Used for spawning logic. Takes a list of currently alive creeps and removes those that will be dead soon.\r\n    //Used to calculate number of creeps needed, ignoring those that are nearly dead\r\n    //TODO could maybe calculate move speed but that's a massive pain\r\n    filterLife(creeps, prespawn = 50) {\r\n        let distance = 0;\r\n        if (this.capital.spawns[0]) {\r\n            distance = PathFinder.search(this.pos, this.capital.barracks.pos, { maxOps: 4000 }).cost || 0;\r\n        }\r\n        return _.filter(creeps, creep => creep.ticksToLive > CREEP_SPAWN_TIME * creep.body.length + distance + prespawn || creep.spawning || (!creep.spawning && !creep.ticksToLive));\r\n    }\r\n    //request a certain number of creeps! Will check currently existing creeps then add to queue based on manager\r\n    //priority\r\n    //REMEMBER TO NOT TRY THIS IF NO BARRACKS\r\n    spawnList(quantity, setup, opts = {}) {\r\n        //if not defined, use these options.\r\n        _.defaults(opts, { priority: this.priority, prespawn: config.spawning.prespawn });\r\n        let current = this.filterLife(this.creepsByRole[setup.role] || [], opts.prespawn).length;\r\n        let needed = quantity - current;\r\n        if (needed > 50) {\r\n            console.log(\"too many requests from: \", this.name, \"FIX now\");\r\n        }\r\n        for (let i = 0; i < needed; i++) {\r\n            this.requestCreep(setup, opts);\r\n        }\r\n    }\r\n    //Adds a creep to the queue of the barracks. Ideally wishlist will be used to call this, but direct calls are technically allowed\r\n    //if needed\r\n    requestCreep(setup, opts) {\r\n        _.defaults(opts, { priority: this.priority, prespawn: 50 });\r\n        //console.log(\"requesting creep \" + setup.role)\r\n        if (this.capital.barracks) {\r\n            this.capital.barracks.addToQueue(setup, this, opts);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Manager.js.map","references":["C:/Users/zangu/OneDrive/Documents/GitHub/ScreepsProject/src/Buildings/Barracks.ts","C:/Users/zangu/OneDrive/Documents/GitHub/ScreepsProject/src/Creep_Setups/CreepSetup.ts","C:/Users/zangu/OneDrive/Documents/GitHub/ScreepsProject/src/config.ts","C:/Users/zangu/OneDrive/Documents/GitHub/ScreepsProject/src/Room/Capital.ts"],"map":"{\"version\":3,\"file\":\"Manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Manager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
