{"code":"import { bodyCost } from \"Creep_Setups/CreepSetup\";\r\nimport { Roles } from \"Creep_Setups/Setups\";\r\nimport { CrisisManager } from \"Managers/CrisisManager\";\r\nimport { DefenseManager } from \"Managers/DefenseManager\";\r\nimport { QueenManager } from \"Managers/QueenManager\";\r\nimport { Building } from \"./Building\";\r\nexport class Barracks extends Building {\r\n    constructor(capital, mainSpawn) {\r\n        super(capital, mainSpawn);\r\n        this.name = \"Barracks_\" + mainSpawn.id;\r\n        this.spawns = this.capital.spawns;\r\n        this.coreSpawn = this.capital.coreSpawn;\r\n        this.availableSpawns = _.filter(this.spawns, r => !r.spawning);\r\n        this.extensions = capital.extensions;\r\n        this.energyStructures = _.sortBy([].concat(this.spawns, this.extensions), r => r.pos.getRangeTo(this.idlePos));\r\n        this.productionPriorities = [];\r\n        this.productionQueue = {};\r\n        this.manager = new QueenManager(this);\r\n        this.defenseManager = new DefenseManager(this);\r\n        //Use a crisis manager if there is no queen and not enough energy to make one\r\n        if (this.capital.room.energyAvailable < 1000 || this.capital.creepsByRole[Roles.queen].length < 2) {\r\n            this.crisisManager = new CrisisManager(this);\r\n        }\r\n    }\r\n    //TODO MAKE A PROPER IDLE SPOT. HIGH PRIO\r\n    get idlePos() {\r\n        return this.spawns[0].pos.getAdjacentPositions()[0];\r\n    }\r\n    generateCreepName(roleName) {\r\n        // Generate a creep name based on the role and add a hex id to make it unique\r\n        let i = generateCreepID();\r\n        while (Game.creeps[(roleName + '_' + i)]) {\r\n            i = generateCreepID();\r\n        }\r\n        return (roleName + '_' + i);\r\n    }\r\n    ;\r\n    createSpawnOrder(setup, manager, opts) {\r\n        const body = setup.generateBody(this.room.energyCapacityAvailable);\r\n        const memory = {\r\n            capital: manager.capital.name,\r\n            manager: manager.name,\r\n            role: setup.role,\r\n            routing: null,\r\n            task: null,\r\n            recycle: false,\r\n            killed: false,\r\n            data: {},\r\n            targetId: opts.targetId,\r\n            state: opts.state,\r\n        };\r\n        const name = this.generateCreepName(setup.role);\r\n        const order = {\r\n            name,\r\n            body,\r\n            memory,\r\n            options: opts\r\n        };\r\n        return order;\r\n    }\r\n    addToQueue(setup, manager, opts) {\r\n        const request = this.createSpawnOrder(setup, manager, opts);\r\n        const prio = request.options.priority;\r\n        if (this.canSpawn(request.body) && request.body.length > 0) {\r\n            if (!this.productionQueue[prio]) {\r\n                this.productionQueue[prio] = [];\r\n                this.productionPriorities.push(prio);\r\n            }\r\n            this.productionQueue[prio].push(request);\r\n        }\r\n        else {\r\n            console.log(\"cannot spawn \" + setup.role + \" for \" + manager + request.body);\r\n            console.log(request.body.length);\r\n            console.log(this.canSpawn(request.body));\r\n        }\r\n    }\r\n    canSpawn(body) {\r\n        return bodyCost(body) <= this.room.energyCapacityAvailable;\r\n    }\r\n    spawnHighestPriorityCreep() {\r\n        const sortedKeys = _.sortBy(this.productionPriorities); //Sort prio list\r\n        for (const prio of sortedKeys) {\r\n            const nextOrder = this.productionQueue[prio].shift();\r\n            if (nextOrder) {\r\n                const res = this.spawnCreep(nextOrder);\r\n                if (res == OK || res == ERR_BUSY) {\r\n                    return res;\r\n                }\r\n                else {\r\n                    if (res != ERR_NOT_ENOUGH_ENERGY) {\r\n                        //this.productionQueue[prio].unshift(nextOrder)\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return -66;\r\n    }\r\n    spawnCreep(request) {\r\n        const body = request.body;\r\n        const name = request.name;\r\n        const memory = request.memory;\r\n        const options = request.options;\r\n        let spawnToUse;\r\n        if (request.options.spawn) {\r\n            spawnToUse = request.options.spawn;\r\n            if (spawnToUse.spawning) {\r\n                return ERR_BUSY;\r\n            }\r\n            else {\r\n                _.remove(this.availableSpawns, spawn => spawn.id == spawnToUse.id); // mark as used\r\n            }\r\n        }\r\n        else {\r\n            spawnToUse = this.availableSpawns.shift(); //remove spawn to be used from the list\r\n        }\r\n        if (spawnToUse) {\r\n            if (bodyCost(body) > this.room.energyCapacityAvailable) {\r\n                return ERR_NOT_ENOUGH_ENERGY;\r\n            }\r\n            memory.data.origin = spawnToUse.pos.roomName;\r\n            const res = spawnToUse.spawnCreep(body, name, {\r\n                memory,\r\n                directions: options.directions,\r\n            });\r\n            if (res == OK) {\r\n                return res;\r\n            }\r\n            else {\r\n                this.availableSpawns.unshift(spawnToUse); //return spawn to stack if spawn unsuccessful\r\n                return res;\r\n            }\r\n        }\r\n        else {\r\n            return ERR_BUSY;\r\n        }\r\n    }\r\n    handleSpawns() {\r\n        let res = 0;\r\n        while (this.availableSpawns.length > 0 && res != -66) {\r\n            res = this.spawnHighestPriorityCreep();\r\n        }\r\n        //TODO Clear the exit position of spawns if a creep is about to spawn\r\n    }\r\n    init() {\r\n    }\r\n    run() {\r\n        console.log(this.room.name, \"-------\", _.map(this.productionQueue, r => _.map(r, t => t.name)));\r\n        this.handleSpawns();\r\n    }\r\n}\r\nfunction generateCreepID() {\r\n    const hex = '0123456789ABCDEF';\r\n    let creepID = '';\r\n    for (let i = 0; i < 4; i++) {\r\n        creepID += hex.charAt(Math.floor(Math.random() * hex.length));\r\n    }\r\n    return creepID;\r\n}\r\n//# sourceMappingURL=Barracks.js.map","references":["C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Creep_Setups/CreepSetup.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Creep_Setups/Setups.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Manager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Managers/ChargerManager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Managers/CrisisManager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Managers/DefenseManager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Managers/QueenManager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Room/Capital.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/Building.ts"],"map":"{\"version\":3,\"file\":\"Barracks.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/Buildings/Barracks.ts\"],\"names\":[],\"mappings\":\"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\"}"}
