{"code":"import { MiningSite } from \"Buildings/MiningSite\";\r\nimport { UpgradeSite } from \"Buildings/UpgradeSite\";\r\nimport { CreepSetup } from \"Creep_Setups/CreepSetup\";\r\nimport { Roles, Setups } from \"Creep_Setups/Setups\";\r\nimport { Manager } from \"Manager\";\r\nimport { ManagerPriority } from \"./ManagerPriority\";\r\n/**\r\n * This manager handles long range hauls for the capital. For intercapital trading, use a mission instead\r\n * This also moves energy between containers and the storage in reserved rooms\r\n *\r\n * Damn after 30 minutes thinking in the shower, this code is so much nicer wtf was I thinking before\r\n *\r\n */\r\nexport class LorryManager extends Manager {\r\n    constructor(hq, prio = ManagerPriority.Lorry.lorry) {\r\n        super(hq, \"LorryManager\" + hq.storage.id, prio);\r\n        this.lorryHQ = hq;\r\n        this.lorrys = this.creepsByRole[Roles.lorry] || [];\r\n        this.bunkerStorage = this.lorryHQ.storage;\r\n        this.setup = Setups.lorrys.early;\r\n        this.powerPer = this.setup.getBodyPotential(CARRY, this.capital);\r\n        this.sites = [];\r\n        this.sites = this.sites.concat(this.capital.miningSites);\r\n        this.sites = this.sites.concat(this.capital.upgradeSite);\r\n        this.sites = _.compact(this.sites);\r\n    }\r\n    grabInputs() {\r\n        let inputsList = [];\r\n        _.forEach(this.capital.miningSites, r => inputsList.push(r.container));\r\n        let newList = _.compact(inputsList);\r\n        return _.sortBy(newList, r => this.getAmount(r));\r\n    }\r\n    grabOutputs() {\r\n        let outputsList = [];\r\n        outputsList.push(this.capital.upgradeSite.container);\r\n        let newList = _.compact(outputsList);\r\n        return _.filter(newList, r => r.energy < r.energyCapacity);\r\n    }\r\n    getAmount(ori) {\r\n        if (ori instanceof StructureContainer) {\r\n            return ori.store.energy;\r\n        }\r\n        else if (ori instanceof Resource) {\r\n            return ori.amount;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    transporterSizePerSite(site) {\r\n        if (site instanceof UpgradeSite) {\r\n            return Math.ceil(UPGRADE_CONTROLLER_POWER * site.manager.powerNeeded * 2 * PathFinder.search(this.lorryHQ.pos, site.pos).cost / CARRY_CAPACITY);\r\n        }\r\n        else {\r\n            return Math.ceil(site.manager.energyPerTick * 2 * PathFinder.search(this.lorryHQ.pos, site.pos).cost / CARRY_CAPACITY);\r\n        }\r\n    }\r\n    handleLorry(lorry) {\r\n        switch (lorry.memory.state) {\r\n            case \"withdraw\":\r\n                let target = Game.getObjectById(lorry.memory.targetId);\r\n                let type = target instanceof StructureContainer ? _.first(_.keys(target.store)) : RESOURCE_ENERGY;\r\n                if (target && lorry.store.getFreeCapacity() > 0) {\r\n                    lorry.goWithdraw(target, type);\r\n                }\r\n                else if (target) {\r\n                    lorry.goTransfer(this.bunkerStorage, type);\r\n                }\r\n                else {\r\n                    this.noTargetActions(lorry);\r\n                }\r\n                return;\r\n            case \"transfer\":\r\n                let transTarget = Game.getObjectById(lorry.memory.targetId);\r\n                if (lorry.store.getFreeCapacity() == 0 && transTarget) {\r\n                    lorry.goTransfer(transTarget);\r\n                }\r\n                else if (transTarget) {\r\n                    lorry.goWithdraw(this.bunkerStorage);\r\n                }\r\n                else {\r\n                    this.noTargetActions(lorry);\r\n                }\r\n                return;\r\n            default:\r\n                lorry.say(\"No state, suiciding\");\r\n                lorry.suicide();\r\n                return;\r\n        }\r\n    }\r\n    noTargetActions(lorry) {\r\n        if (lorry.store.getUsedCapacity() == 0) {\r\n            let drop = lorry.pos.findClosestByMultiRoomRange(this.room.allDrops);\r\n            if (drop) {\r\n                lorry.goWithdraw(drop);\r\n            }\r\n            else {\r\n                lorry.say(\"No target and no drops, suiciding\");\r\n                lorry.suicide();\r\n            }\r\n        }\r\n        else {\r\n            lorry.goTransfer(this.bunkerStorage);\r\n        }\r\n    }\r\n    init() {\r\n        var _a, _b, _c;\r\n        for (let site of this.sites) {\r\n            if (site.container && site.room.hostiles.length == 0) {\r\n                let targetTotal = this.transporterSizePerSite(site);\r\n                console.log(site.container.id, \" needs \", targetTotal);\r\n                let current = this.filterLife(_.filter(this.lorrys, r => r.memory.targetId == site.container.id));\r\n                let currentSize = _.sum(current, r => r.getActiveBodyparts(CARRY));\r\n                let maxSize = this.powerPer;\r\n                if (targetTotal > currentSize) {\r\n                    let numNeeded = 1;\r\n                    let state = site instanceof MiningSite ? \"withdraw\" : \"transfer\";\r\n                    let sizeNeeded = targetTotal;\r\n                    if (maxSize > targetTotal) {\r\n                        numNeeded = Math.ceil(targetTotal / maxSize);\r\n                        sizeNeeded = Math.ceil(targetTotal / numNeeded);\r\n                    }\r\n                    console.log(\"Size Requested\", sizeNeeded);\r\n                    let setup = new CreepSetup(Roles.lorry, { pattern: [CARRY, MOVE], sizeLimit: sizeNeeded, });\r\n                    (_a = this.capital.barracks) === null || _a === void 0 ? void 0 : _a.addToQueue(setup, this, { priority: ManagerPriority.Lorry.lorry, targetId: (_b = site.container) === null || _b === void 0 ? void 0 : _b.id, state: state });\r\n                    /*\r\n                    let size = Math.min(targetTotal - currentSize, maxSize);\r\n                    let state: \"withdraw\" | \"transfer\" | undefined = site instanceof MiningSite ? \"withdraw\" : \"transfer\";\r\n                    let setup = new CreepSetup(Roles.lorry, {pattern  : [CARRY, MOVE], sizeLimit: size,})\r\n                    this.capital.barracks?.addToQueue(setup, this, {priority: ManagerPriority.Lorry.lorry, targetId: site.container?.id, state: state})\r\n                    */\r\n                }\r\n            }\r\n            else {\r\n                //console.log(\"no container at site\")\r\n            }\r\n        }\r\n        let dropAmount = _.sum(this.room.droppedEnergy, r => r.amount);\r\n        if (dropAmount >= 200) {\r\n            let current = _.filter(this.lorrys, r => r.memory.targetId == undefined).length;\r\n            if (current == 0) {\r\n                let setup = new CreepSetup(Roles.lorry, { pattern: [CARRY, MOVE], sizeLimit: Math.floor(dropAmount / CARRY_CAPACITY / 8) });\r\n                (_c = this.capital.barracks) === null || _c === void 0 ? void 0 : _c.addToQueue(setup, this, { priority: ManagerPriority.Lorry.lorry, targetId: undefined, state: \"withdraw\" });\r\n            }\r\n        }\r\n    }\r\n    run() {\r\n        _.forEach(this.lorrys, r => this.handleLorry(r));\r\n    }\r\n}\r\n//# sourceMappingURL=LorryManager.js.map","references":["C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/Barracks.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/ExtractorSite.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/LorryHQ.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/MiningSite.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Buildings/UpgradeSite.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Creep_Setups/CreepSetup.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Creep_Setups/Setups.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Manager.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Rando_Functions.ts","C:/Users/ADMIN BOI/Documents/GitHub/ScreepsProject/src/Managers/ManagerPriority.ts"],"map":"{\"version\":3,\"file\":\"LorryManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/Managers/LorryManager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
